class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid[0][0] == 1) 
             return -1;
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> reach_cells = new LinkedList<>();

    int[][] directions={{0,1},{1,0},{0,-1},{-1,0},{1,1},{1,-1},{-1,-1},{-1,1}};
    reach_cells.add(new int[]{0,0,1}); //here 0,0(points)& 1 is the step count

    while(!reach_cells.isEmpty()){
        int size = reach_cells.size();
        while(size-- > 0){   //no need but for clarity and as BFS
            int[] point = reach_cells.poll();
            if(point[0] == m-1 && point[1] == n-1)
                   return point[2];
            for(int[] d : directions){
                int x = point[0] + d[0];
                int y = point[1] + d[1];
                if(x>=0 && y>=0 && x<m && y<n && grid[x][y]==0){
                    reach_cells.add(new int[]{x,y,point[2]+1});
                    grid[x][y]=1;
                }
            }
        }
    }
    return -1;

    }
}
